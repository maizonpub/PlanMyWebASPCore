@model DashBoardViewModel
@{
    ViewData["Title"] = "Index";
    ViewBag.Active = "SeatingChart";
    Layout = "~/Views/Shared/PlannerDashboard.cshtml";
}
<style>
    html body {
        background-color: #faf9f5;
        font-family: Istok Web !important;
        font-weight: 400,400italic,700,700italic;
    }
</style>


<div class="main-container">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="dashboard-page-head page-header">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="page-title">
                                <h1 style="color:black;">Seating Chart&nbsp;&nbsp;&nbsp;<small>Manage your event Seating chart.</small></h1>
                            </div>
                        </div>
                        @*<div class="col-md-4">
                            <div class="action-block">
                                <a onclick="$('#addTable')" class="btn tp-btn-default" id="show">Add Table</a>
                            </div>
                        </div>*@
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="couple-board">
                    <form method="post" action="/Dashboard/SeatingChart">
                        <input type="hidden" name="action" value="addTable" />
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label" for="tableName">Table name</label>
                                    <div class="">
                                        <input id="tableName" name="tableName" type="text" placeholder="Table name" class="form-control input-md">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label" for="type">Table Type</label>
                                    <div class="">
                                        <select id="type" name="type" class="form-control input-md">
                                            <option>Circle</option>
                                            <option>Rectangle</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label" for="seatsNumber">Seats number</label>
                                    <div class="">
                                        <input id="seatsNumber" name="seatsNumber" type="number" placeholder="Seats number" class="form-control input-md">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">

                                    <input type="submit" value="Add Table" class="btn btn-primary">

                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="couple-board">
                    <div class="row">
                        <div class="col-md-12">
                            <div id="sample">
                                <div id="myFlexDiv">
                                    <div id="myGuests" style="border: solid 1px black"></div>

                                    <div id="myDiagramDiv" style="border: solid 1px black"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/wp-content/themes/weddingvendor/gojs/release/go.js"></script>
<script src="/wp-content/themes/weddingvendor/gojs/assets/js/goSamples.js"></script>  <!-- this is only for the GoJS Samples framework -->
<script id="code">
  function init() {
    if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
    var $ = go.GraphObject.make;

    // Initialize the main Diagram
    myDiagram =
      $(go.Diagram, "myDiagramDiv",
        {
          allowDragOut: true,  // to myGuests
          allowDrop: true,  // from myGuests
          allowClipboard: false,
          initialContentAlignment: go.Spot.Center,
          draggingTool: $(SpecialDraggingTool),
          rotatingTool: $(HorizontalTextRotatingTool),
          // For this sample, automatically show the state of the diagram's model on the page
          "ModelChanged": function(e) {
              if (e.isTransactionFinished) {

              }
            },
          "undoManager.isEnabled": true
        });

    myDiagram.nodeTemplateMap.add("",  // default template, for people
      $(go.Node, "Auto",
        { background: "transparent" },  // in front of all Tables
        // when selected is in foreground layer
        new go.Binding("layerName", "isSelected", function(s) { return s ? "Foreground" : ""; }).ofObject(),
        { locationSpot: go.Spot.Center },
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        new go.Binding("text", "key"),
        { // what to do when a drag-over or a drag-drop occurs on a Node representing a table
          mouseDragEnter: function(e, node, prev) { highlightSeats(node, node.diagram.selection, true); },
          mouseDragLeave: function(e, node, next) { highlightSeats(node, node.diagram.selection, false); },
          mouseDrop: function(e, node) { assignPeopleToSeats(node, node.diagram.selection, e.documentPoint); }
        },
        $(go.Shape, "Rectangle", { fill: "blanchedalmond", stroke: null }),
        $(go.Panel, "Viewbox",
          { desiredSize: new go.Size(50, 38) },
          $(go.TextBlock,{ margin: 2, desiredSize: new go.Size(55, NaN), font: "8pt Verdana, sans-serif", textAlign: "center", stroke: "darkblue" },
            new go.Binding("text", "", function(data) {
                var s = data.key;
                if (data.plus) s += " +" + data.plus.toString();
                return s;
              }))
        )
      ));

    // Create a seat element at a particular alignment relative to the table.
    function Seat(number, align, focus) {
      if (typeof align === 'string') align = go.Spot.parse(align);
      if (!align || !align.isSpot()) align = go.Spot.Right;
      if (typeof focus === 'string') focus = go.Spot.parse(focus);
      if (!focus || !focus.isSpot()) focus = align.opposite();
      return $(go.Panel, "Spot",
               { name: number.toString(), alignment: align, alignmentFocus: focus },
               $(go.Shape, "Circle",
                 { name: "SEATSHAPE", desiredSize: new go.Size(40, 40), fill: "#04cccd", stroke: "white", strokeWidth: 2 },
                 new go.Binding("fill")),
               $(go.TextBlock, number.toString(),
                 { font: "10pt Verdana, sans-serif" },
                 new go.Binding("angle", "angle", function(n) { return -n; }))
             );
    }
    function CSeats(total) {
      var seats = [];
      if (total > 0) {
        var p = new go.Point(0, -0.5);  // start at top
        var ang = 360 / total;  // go clockwise
        for (var i = 0; i < total; i++) {
          seats.push(Seat(i + 1, new go.Spot(p.x + 0.5, p.y + 0.5)));
          p.rotate(ang);
        }
      }
      return seats;
    }
    function URSeats(total) {
      var seats = [];
      if (total > 0) {
        var p = new go.Point(0, 0);  // start at top
        var ang = 360 / total;  // go clockwise
        for (var i = 0; i < total; i++) {
          seats.push(Seat(i + 1, new go.Spot(p.x + (0.2 * (i+1)), p.y)));
          //p.rotate(ang);
        }
      }
      return seats;
    }
    function DRSeats(total,start) {
      var seats = [];
      if (total > 0) {
        var p = new go.Point(0, 1);  // start at top
        var ang = 360 / total;  // go clockwise
        for (var i = 0; i < total; i++) {
          seats.push(Seat(start + i, new go.Spot(p.x + (0.2 * (i+1)), p.y)));
          //p.rotate(ang);
        }
      }
      return seats;
    }
    function LRSeat(seatno) {
      var seats = [];
        var p = new go.Point(0, 0.5);
        seats.push(Seat(seatno, new go.Spot(p.x, p.y)));
      return seats;
    }
    function RRSeat(seatno) {
      var seats = [];
        var p = new go.Point(1, 0.5);
        seats.push(Seat(seatno, new go.Spot(p.x, p.y)));
      return seats;
    }
    function tableStyle() {
      return [
        { background: "transparent" },
        { layerName: "Background" },  // behind all Persons
        { locationSpot: go.Spot.Center, locationObjectName: "TABLESHAPE" },
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        { rotatable: true },
        new go.Binding("angle").makeTwoWay(),
        { // what to do when a drag-over or a drag-drop occurs on a Node representing a table
          mouseDragEnter: function(e, node, prev) { highlightSeats(node, node.diagram.selection, true); },
          mouseDragLeave: function(e, node, next) { highlightSeats(node, node.diagram.selection, false); },
          mouseDrop: function(e, node) { assignPeopleToSeats(node, node.diagram.selection, e.documentPoint); }
        }
      ];
    }

    // various kinds of tables:
        myDiagram.nodeTemplateMap.add("Seating64",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(0, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating71",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(0, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating72",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(0, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating73",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(0, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating74",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(0, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating75",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(8, 0), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(0)


      ));
          myDiagram.nodeTemplateMap.add("Seating82",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(250, 250), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(10)


      ));
          myDiagram.nodeTemplateMap.add("Seating86",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Rectangle",
            { name: "TABLESHAPE", desiredSize: new go.Size(250, 100), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),
                    URSeats(4),
            DRSeats(4, 6),
            LRSeat(5),
            RRSeat(10)

      ));
          myDiagram.nodeTemplateMap.add("Seating100",
      $(go.Node, "Spot", tableStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle",
            { name: "TABLESHAPE", desiredSize: new go.Size(125, 100), fill: "#04cccd", stroke: null },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            new go.Binding("fill")),
          $(go.TextBlock, { editable: true, font: "bold 11pt Verdana, sans-serif" },
            new go.Binding("text", "name").makeTwoWay(),
            new go.Binding("angle", "angle", function(n) { return -n; }))
        ),

            CSeats(5)


      ));


    // what to do when a drag-drop occurs in the Diagram's background
    myDiagram.mouseDrop = function(e) {
      // when the selection is dropped in the diagram's background,
      // make sure the selected people no longer belong to any table
      e.diagram.selection.each(function(n) {
          if (isPerson(n))
            {
                 unassignSeat(n.data);
                 jQuery.post("/seating-chart",{action:"assignPerson", key:n.data.id, table:n.data.table, seat: n.data.seat, loc:n.data.loc});

            }
          else
          {
            jQuery.post("/seating-chart",{action:"updateSeatData", loc:n.data.loc, category:n.data.category});
          }
        });
    };

    // to simulate a "move" from the Palette, the source Node must be deleted.
    myDiagram.addDiagramListener("ExternalObjectsDropped", function(e) {
      // if any Tables were dropped, don't delete from myGuests
      if (!e.subject.any(isTable)) {
        myGuests.commandHandler.deleteSelection();
      }
      e.subject.each(function(n) {
          if (isPerson(n)) {
            jQuery.post("/seating-chart",{action:"assignPerson", key:n.data.id, table:n.data.table, seat: n.data.seat, loc:n.data.loc});
          }
        });
    });

    // put deleted people back in the myGuests diagram
    myDiagram.addDiagramListener("SelectionDeleted", function(e) {
      // no-op if deleted by myGuests' ExternalObjectsDropped listener
      if (myDiagram.disableSelectionDeleted) return;
      // e.subject is the myDiagram.selection collection
      e.subject.each(function(n) {
          if (isPerson(n)) {
            myGuests.model.addNodeData(myGuests.model.copyNodeData(n.data));
            jQuery.post("/seating-chart",{action:"unAssignPerson", key:n.data.id});
          }
          else
          {
            jQuery.post("/seating-chart",{action:"DeleteTable", key:n.data.key});
          }
        });
    });

    // create some initial tables
    myDiagram.model = new go.GraphLinksModel([
          {"key":64, "category":"Seating64", "name":"", "guests":{}, "loc":"0 0"},
            {"key":71, "category":"Seating71", "name":"", "guests":{}, "loc":"0 0"},
            {"key":72, "category":"Seating72", "name":"", "guests":{}, "loc":"0 0"},
            {"key":73, "category":"Seating73", "name":"", "guests":{}, "loc":"0 0"},
            {"key":74, "category":"Seating74", "name":"", "guests":{}, "loc":"0 0"},
            {"key":75, "category":"Seating75", "name":"", "guests":{}, "loc":"40 0"},
            {"key":82, "category":"Seating82", "name":"jhfgjhgj", "guests":{}, "loc":"277.57370127140643 238.70890311153852"},
            {"key":86, "category":"Seating86", "name":"test", "guests":{}, "loc":"713.8819583958041 276.61846662726816"},
            {"key":100, "category":"Seating100", "name":"table3", "guests":{}, "loc":"830.9999999999995 84.99999999999943"},
              { key: "mansour dalla ", id:"35" ,table:82,seat:10,loc:"191.4631618105593 169.18791343560855" }        ]);  // this sample does not make use of any links


    // initialize the Palette
    myGuests =
      $(go.Diagram, "myGuests",
        {
          layout: $(go.GridLayout,
                    {
                      sorting: go.GridLayout.Ascending  // sort by Node.text value
                    }),
          allowDragOut: true,  // to myDiagram
          allowDrop: true  // from myDiagram
        });

    myGuests.nodeTemplateMap = myDiagram.nodeTemplateMap;

    // specify the contents of the Palette
    myGuests.model = new go.GraphLinksModel([
          //{ key: "Daenerys Targaryen", plus: 3 },  // dragons, of course
      //{ key: "Jon Snow" },
      //{ key: "Stannis Baratheon" },
      //{ key: "Arya Stark" },
      //{ key: "Jorah Mormont" },
      //{ key: "Sandor Clegane" },
      //{ key: "Joffrey Baratheon" },
      //{ key: "Brienne of Tarth" },
      //{ key: "Hodor" }
    ]);

    myGuests.model.undoManager = myDiagram.model.undoManager  // shared UndoManager!

    // To simulate a "move" from the Diagram back to the Palette, the source Node must be deleted.
    myGuests.addDiagramListener("ExternalObjectsDropped", function(e) {
      // e.subject is the myGuests.selection collection
      // if the user dragged a Table to the myGuests diagram, cancel the drag
      if (e.subject.any(isTable)) {
        myDiagram.currentTool.doCancel();
        myGuests.currentTool.doCancel();
        return;
      }
      myDiagram.selection.each(function(n) {
        if (isPerson(n)) unassignSeat(n.data);
      });
      myDiagram.disableSelectionDeleted = true;
      myDiagram.commandHandler.deleteSelection();
      myDiagram.disableSelectionDeleted = false;
      myGuests.selection.each(function(n) {
        if (isPerson(n)) unassignSeat(n.data);
      });
    });

//myDiagram.startTransaction("move guests");
    //myDiagram.commitTransaction("move guests");
  } // end init

  function isPerson(n) { return n !== null && n.category === ""; }

  function isTable(n) { return n !== null && n.category !== ""; }

  // Highlight the empty and occupied seats at a "Table" Node
  function highlightSeats(node, coll, show) {
    if (isPerson(node)) {  // refer to the person's table instead
      node = node.diagram.findNodeForKey(node.data.table);
      if (node === null) return;
    }
    if (coll.any(isTable)) {
      // if dragging a Table, don't do any highlighting
      return;
    }
    var guests = node.data.guests;
    for (var sit = node.elements; sit.next();) {
      var seat = sit.value;
      if (seat.name) {
        var num = parseFloat(seat.name);
        if (isNaN(num)) continue;
        var seatshape = seat.findObject("SEATSHAPE");
        if (!seatshape) continue;
        if (show) {
          if (guests[seat.name]) {
              seatshape.stroke = "red";
          } else {
              seatshape.stroke = "green";
          }
        } else {
          seatshape.stroke = "white";
        }
      }
    }
  }

  // Given a "Table" Node, assign seats for all of the people in the given collection of Nodes;
  // the optional Point argument indicates where the collection of people may have been dropped.
  function assignPeopleToSeats(node, coll, pt) {
    if (isPerson(node)) {  // refer to the person's table instead
      node = node.diagram.findNodeForKey(node.data.table);
      if (node === null) return;
    }
    if (coll.any(isTable)) {
      // if dragging a Table, don't allow it to be dropped onto another table
      myDiagram.currentTool.doCancel();
      return;
    }
    // OK -- all Nodes are people, call assignSeat on each person data
    coll.each(function(n) { assignSeat(node, n.data, pt); });
    positionPeopleAtSeats(node);
  }

  // Given a "Table" Node, assign one guest data to a seat at that table.
  // Also handles cases where the guest represents multiple people, because guest.plus > 0.
  // This tries to assign the unoccupied seat that is closest to the given point in document coordinates.
  function assignSeat(node, guest, pt) {
    if (isPerson(node)) {  // refer to the person's table instead
      node = node.diagram.findNodeForKey(node.data.table);
      if (node === null) return;
    }
    if (guest instanceof go.GraphObject) throw Error("A guest object must not be a GraphObject: " + guest.toString());
    if (!(pt instanceof go.Point)) pt = node.location;

    // in case the guest used to be assigned to a different seat, perhaps at a different table
    unassignSeat(guest);

    var model = node.diagram.model;
    var guests = node.data.guests;
    // iterate over all seats in the Node to find one that is not occupied
    var closestseatname = findClosestUnoccupiedSeat(node, pt);
    if (closestseatname) {
      model.setDataProperty(guests, closestseatname, guest.key);
      model.setDataProperty(guest, "table", node.data.key);
      model.setDataProperty(guest, "seat", parseFloat(closestseatname));
    }

    var plus = guest.plus;
    if (plus) {  // represents several people
      // forget the "plus" info, since next we create N copies of the node/data
      guest.plus = undefined;
      model.updateTargetBindings(guest);
      for (var i = 0; i < plus; i++) {
        var copy = model.copyNodeData(guest);
        // don't copy the seat assignment of the first person
        copy.table = undefined;
        copy.seat = undefined;
        model.addNodeData(copy);
        assignSeat(node, copy, pt);
      }
    }
  }

  // Declare that the guest represented by the data is no longer assigned to a seat at a table.
  // If the guest had been at a table, the guest is removed from the table's list of guests.
  function unassignSeat(guest) {
    if (guest instanceof go.GraphObject) throw Error("A guest object must not be a GraphObject: " + guest.toString());
    var model = myDiagram.model;
    // remove from any table that the guest is assigned to
    if (guest.table) {
      var table = model.findNodeDataForKey(guest.table);
      if (table) {
        var guests = table.guests;
        if (guests) model.setDataProperty(guests, guest.seat.toString(), undefined);
      }
    }
    model.setDataProperty(guest, "table", undefined);
    model.setDataProperty(guest, "seat", undefined);
  }

  // Find the name of the unoccupied seat that is closest to the given Point.
  // This returns null if no seat is available at this table.
  function findClosestUnoccupiedSeat(node, pt) {
    if (isPerson(node)) {  // refer to the person's table instead
      node = node.diagram.findNodeForKey(node.data.table);
      if (node === null) return;
    }
    var guests = node.data.guests;
    var closestseatname = null;
    var closestseatdist = Infinity;
    // iterate over all seats in the Node to find one that is not occupied
    for (var sit = node.elements; sit.next();) {
      var seat = sit.value;
      if (seat.name) {
        var num = parseFloat(seat.name);
        if (isNaN(num)) continue;  // not really a "seat"
        if (guests[seat.name]) continue;  // already assigned
        var seatloc = seat.getDocumentPoint(go.Spot.Center);
        var seatdist = seatloc.distanceSquaredPoint(pt);
        if (seatdist < closestseatdist) {
          closestseatdist = seatdist;
          closestseatname = seat.name;
        }
      }
    }
    return closestseatname;
  }

  // Position the nodes of all of the guests that are seated at this table
  // to be at their corresponding seat elements of the given "Table" Node.
  function positionPeopleAtSeats(node) {
    if (isPerson(node)) {  // refer to the person's table instead
      node = node.diagram.findNodeForKey(node.data.table);
      if (node === null) return;
    }
    var guests = node.data.guests;
    var model = node.diagram.model;
    for (var seatname in guests) {
      var guestkey = guests[seatname];
      var guestdata = model.findNodeDataForKey(guestkey);
      positionPersonAtSeat(guestdata);
    }
  }

  // Position a single guest Node to be at the location of the seat to which they are assigned.
  function positionPersonAtSeat(guest) {
    if (guest instanceof go.GraphObject) throw Error("A guest object must not be a GraphObject: " + guest.toString());
    if (!guest || !guest.table || !guest.seat) return;
    var diagram = myDiagram;
    var table = diagram.findPartForKey(guest.table);
    var person = diagram.findPartForData(guest);
    if (table && person) {
      var seat = table.findObject(guest.seat.toString());
      var loc = seat.getDocumentPoint(go.Spot.Center);
      person.location = loc;
    }
  }
  function positionPartAtSeat(guest) {
    if (guest.data instanceof go.GraphObject) throw Error("A guest object must not be a GraphObject: " + guest.toString());
    if (!guest.data || !guest.data.table || !guest.data.seat) return;
    var diagram = myDiagram;
    var table = diagram.findPartForKey(guest.data.table);
    var person = guest.part;//diagram.findPartForData(guest);
    if (table && person) {
      var seat = table.findObject(guest.data.seat.toString());
      var loc = seat.getDocumentPoint(go.Spot.Center);
      person.location = loc;
    }
  }

  // Automatically drag people Nodes along with the table Node at which they are seated.
  function SpecialDraggingTool() {
    go.DraggingTool.call(this);
    this.isCopyEnabled = false;  // don't want to copy people except between Diagrams
  }
    go.Diagram.inherit(SpecialDraggingTool, go.DraggingTool);
    

  /** @@override */
  SpecialDraggingTool.prototype.computeEffectiveCollection = function(parts) {
    var map = go.DraggingTool.prototype.computeEffectiveCollection.call(this, parts);
    // for each Node representing a table, also drag all of the people seated at that table
    parts.each(function(table) {
      if (isPerson(table)) return;  // ignore persons
      // this is a table Node, find all people Nodes using the same table key
      for (var nit = table.diagram.nodes; nit.next(); ) {
        var n = nit.value;
        if (isPerson(n) && n.data.table === table.data.key) {
          if (!map.contains(n)) map.add(n, { point: n.location.copy() 
          });
          }
        }
    });
    return map;
  };
  // end SpecialDraggingTool


  // Automatically move seated people as a table is rotated, to keep them in their seats.
  // Note that because people are separate Nodes, rotating a table Node means the people Nodes
  // are not rotated, so their names (TextBlocks) remain horizontal.
  function HorizontalTextRotatingTool() {
    go.RotatingTool.call(this);
  }
  go.Diagram.inherit(HorizontalTextRotatingTool, go.RotatingTool);

  /** @@override */
  HorizontalTextRotatingTool.prototype.rotate = function(newangle) {
    go.RotatingTool.prototype.rotate.call(this, newangle);
    var node = this.adornedObject.part;
    positionPeopleAtSeats(node);
  };
  // end HorizontalTextRotatingTool

</script>
<script>window.onload = function(){init();};</script>


