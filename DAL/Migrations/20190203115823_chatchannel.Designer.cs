// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DbWebContext))]
    [Migration("20190203115823_chatchannel")]
    partial class chatchannel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.BasketItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OffersId");

                    b.Property<int?>("OrderId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("OffersId");

                    b.HasIndex("OrderId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("DAL.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HtmlDescription");

                    b.Property<string>("Image");

                    b.Property<int>("MediaType");

                    b.Property<DateTime>("PostDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DAL.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Media");

                    b.Property<int>("MediaType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("DAL.BlogCategoryRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogId");

                    b.Property<int?>("CategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogCategoryRelations");
                });

            modelBuilder.Entity("DAL.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost");

                    b.Property<int>("BudgetCategoryId");

                    b.Property<string>("Description");

                    b.Property<decimal>("EstimatedCost");

                    b.Property<string>("Notes");

                    b.Property<decimal>("PaidCost");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BudgetCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("DAL.BudgetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("DAL.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsPriority");

                    b.Property<int>("Status");

                    b.Property<DateTime>("Timing");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<int?>("VendorCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorCategoryId");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DAL.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DAL.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DAL.GuestList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<int?>("GuestListTablesId");

                    b.Property<int>("GuestStatus");

                    b.Property<string>("Phone");

                    b.Property<int>("Side");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GuestListTablesId");

                    b.HasIndex("UserId");

                    b.ToTable("GuestLists");
                });

            modelBuilder.Entity("DAL.GuestListTables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GuestListTables");
                });

            modelBuilder.Entity("DAL.HomeSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Media");

                    b.Property<int>("MediaType");

                    b.HasKey("Id");

                    b.ToTable("HomeSlider");
                });

            modelBuilder.Entity("DAL.HomeTips", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Media");

                    b.Property<int>("MediaType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("HomeTips");
                });

            modelBuilder.Entity("DAL.Offers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Image");

                    b.Property<int>("OffersType");

                    b.Property<decimal?>("Price");

                    b.Property<DateTime?>("SaleFromDate");

                    b.Property<decimal?>("SalePrice");

                    b.Property<DateTime?>("SaleToDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<int>("Validity");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DAL.OffersCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OffersId");

                    b.Property<int?>("VendorCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("OffersId");

                    b.HasIndex("VendorCategoryId");

                    b.ToTable("OffersCategories");
                });

            modelBuilder.Entity("DAL.OffersGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<int>("MediaType");

                    b.Property<int?>("OffersId");

                    b.HasKey("Id");

                    b.HasIndex("OffersId");

                    b.ToTable("OffersGalleries");
                });

            modelBuilder.Entity("DAL.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderStatus");

                    b.Property<string>("ReferenceNumber");

                    b.Property<string>("Status");

                    b.Property<decimal>("Total");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("TransactionUUID");

                    b.Property<string>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Pages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HtmlText");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("DAL.PaymentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessKey");

                    b.Property<int>("PaymentType");

                    b.Property<string>("ProfileId");

                    b.Property<string>("RecurringFrequency");

                    b.Property<string>("SecuritySign");

                    b.HasKey("Id");

                    b.ToTable("PaymentSettings");
                });

            modelBuilder.Entity("DAL.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Link");

                    b.Property<int>("MediaType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("DAL.UserPaymentToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentSettingId");

                    b.Property<string>("Token");

                    b.Property<int>("TokenStatus");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentTokens");
                });

            modelBuilder.Entity("DAL.UserPushToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PushDevice");

                    b.Property<string>("Token");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPushToken");
                });

            modelBuilder.Entity("DAL.VendorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<int>("MediaType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("VendorCategories");
                });

            modelBuilder.Entity("DAL.VendorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CountryId");

                    b.Property<string>("Email");

                    b.Property<string>("HtmlDescription");

                    b.Property<bool>("IsFeatured");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Location");

                    b.Property<double?>("Longitude");

                    b.Property<int>("MediaType");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Thumb");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("VendorItems");
                });

            modelBuilder.Entity("DAL.VendorItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("VendorCategoryId");

                    b.Property<int?>("VendorItemId");

                    b.HasKey("Id");

                    b.HasIndex("VendorCategoryId");

                    b.HasIndex("VendorItemId");

                    b.ToTable("VendorItemCategories");
                });

            modelBuilder.Entity("DAL.VendorItemGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<int?>("ItemId");

                    b.Property<int>("MediaType");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("VendorItemGalleries");
                });

            modelBuilder.Entity("DAL.VendorItemReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIn");

                    b.Property<int>("Status");

                    b.Property<int?>("VendorItemId");

                    b.Property<string>("author");

                    b.Property<string>("comment");

                    b.Property<string>("email");

                    b.Property<int>("rating");

                    b.Property<string>("subject");

                    b.HasKey("Id");

                    b.HasIndex("VendorItemId");

                    b.ToTable("VendorItemReviews");
                });

            modelBuilder.Entity("DAL.VendorItemTypeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VendorItemId");

                    b.Property<int>("VendorTypeValueId");

                    b.HasKey("Id");

                    b.HasIndex("VendorItemId");

                    b.HasIndex("VendorTypeValueId");

                    b.ToTable("VendorItemTypeValues");
                });

            modelBuilder.Entity("DAL.VendorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<int?>("VendorCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("VendorCategoryId");

                    b.ToTable("VendorTypes");
                });

            modelBuilder.Entity("DAL.VendorTypeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<int>("VendorTypeId");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("VendorTypeValues");
                });

            modelBuilder.Entity("DAL.WebContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail");

                    b.Property<string>("AdminEmailPassword");

                    b.Property<string>("BlogTitle");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactPhone");

                    b.Property<string>("FeaturedVendorsTitle");

                    b.Property<string>("TipsTitle");

                    b.HasKey("Id");

                    b.ToTable("WebContents");
                });

            modelBuilder.Entity("DAL.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.Property<int>("VendorItemId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorItemId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address");

                    b.Property<string>("Age");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FBToken");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("Image");

                    b.Property<string>("LastName");

                    b.Property<int>("UserType");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("Users");
                });

            modelBuilder.Entity("DAL.BasketItems", b =>
                {
                    b.HasOne("DAL.Offers", "Offers")
                        .WithMany()
                        .HasForeignKey("OffersId");

                    b.HasOne("DAL.Order", "Order")
                        .WithMany("BasketItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("DAL.BlogCategoryRelation", b =>
                {
                    b.HasOne("DAL.Blog", "Blog")
                        .WithMany("BlogCategoryRelations")
                        .HasForeignKey("BlogId");

                    b.HasOne("DAL.BlogCategory", "Category")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("DAL.Budget", b =>
                {
                    b.HasOne("DAL.BudgetCategory", "BudgetCategory")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.BudgetCategory", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.CheckList", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("DAL.VendorCategory", "VendorCategory")
                        .WithMany()
                        .HasForeignKey("VendorCategoryId");
                });

            modelBuilder.Entity("DAL.Events", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.GuestList", b =>
                {
                    b.HasOne("DAL.GuestListTables", "GuestListTables")
                        .WithMany()
                        .HasForeignKey("GuestListTablesId");

                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.GuestListTables", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Offers", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.OffersCategory", b =>
                {
                    b.HasOne("DAL.Offers", "Offers")
                        .WithMany("OffersCategories")
                        .HasForeignKey("OffersId");

                    b.HasOne("DAL.VendorCategory", "VendorCategory")
                        .WithMany()
                        .HasForeignKey("VendorCategoryId");
                });

            modelBuilder.Entity("DAL.OffersGallery", b =>
                {
                    b.HasOne("DAL.Offers", "Offers")
                        .WithMany("OffersGalleries")
                        .HasForeignKey("OffersId");
                });

            modelBuilder.Entity("DAL.Order", b =>
                {
                    b.HasOne("DAL.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("DAL.UserPaymentToken", b =>
                {
                    b.HasOne("DAL.PaymentSetting", "PaymentSetting")
                        .WithMany()
                        .HasForeignKey("PaymentSettingId");

                    b.HasOne("DAL.Users", "User")
                        .WithMany("UserPaymentTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.UserPushToken", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.VendorItem", b =>
                {
                    b.HasOne("DAL.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Users", "User")
                        .WithMany("VendorItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.VendorItemCategory", b =>
                {
                    b.HasOne("DAL.VendorCategory", "VendorCategory")
                        .WithMany("Categories")
                        .HasForeignKey("VendorCategoryId");

                    b.HasOne("DAL.VendorItem", "VendorItem")
                        .WithMany("Categories")
                        .HasForeignKey("VendorItemId");
                });

            modelBuilder.Entity("DAL.VendorItemGallery", b =>
                {
                    b.HasOne("DAL.VendorItem", "Item")
                        .WithMany("Gallery")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("DAL.VendorItemReview", b =>
                {
                    b.HasOne("DAL.VendorItem", "VendorItem")
                        .WithMany("VendorItemReviews")
                        .HasForeignKey("VendorItemId");
                });

            modelBuilder.Entity("DAL.VendorItemTypeValue", b =>
                {
                    b.HasOne("DAL.VendorItem", "VendorItem")
                        .WithMany("VendorItemTypeValues")
                        .HasForeignKey("VendorItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.VendorTypeValue", "VendorTypeValue")
                        .WithMany("VendorItemTypeValues")
                        .HasForeignKey("VendorTypeValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.VendorType", b =>
                {
                    b.HasOne("DAL.VendorCategory", "VendorCategory")
                        .WithMany()
                        .HasForeignKey("VendorCategoryId");
                });

            modelBuilder.Entity("DAL.VendorTypeValue", b =>
                {
                    b.HasOne("DAL.VendorType", "VendorType")
                        .WithMany("VendorTypeValues")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.WishList", b =>
                {
                    b.HasOne("DAL.Users", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserId");

                    b.HasOne("DAL.VendorItem", "VendorItem")
                        .WithMany("WishLists")
                        .HasForeignKey("VendorItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
